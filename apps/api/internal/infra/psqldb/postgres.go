package psqldb

import (
	"InfralyraApi/config"
	"errors"
	"fmt"
	"log"

	"github.com/golang-migrate/migrate/v4"
	"github.com/jmoiron/sqlx"

	_ "github.com/golang-migrate/migrate/v4/database/postgres"
	_ "github.com/golang-migrate/migrate/v4/source/file"
	_ "github.com/lib/pq"
)

const (
	mPath = "file://./migrations"

	UsersTableName = "users"
)

func InitPsqlDbConnect() (*sqlx.DB, error) {
	db, err := NewDBMS(DBMSConfig{
		Type:     config.InfralyraConfig.PsqlDb.Type,
		Host:     config.InfralyraConfig.PsqlDb.Host,
		Port:     config.InfralyraConfig.PsqlDb.Port,
		Username: config.InfralyraEnv.PsqlDb.Username,
		Password: config.InfralyraEnv.PsqlDb.Password,
		DbName:   config.InfralyraConfig.PsqlDb.Dbname,
		SslMode:  config.InfralyraConfig.PsqlDb.Sslmode,
	})
	if err != nil {
		return nil, err
	}

	log.Printf(
		"‚úîÔ∏è  –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö %s\n",
		config.InfralyraConfig.PsqlDb.Dbname,
	)

	return db, nil
}

func InitPsqlDbMigration() error {
	m, err := migrate.New(mPath, config.InfralyraEnv.PsqlDb.Url)
	if err != nil {
		return err
	}

	version, dirty, verr := m.Version()
	if verr != nil && !errors.Is(verr, migrate.ErrNilVersion) {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –º–∏–≥—Ä–∞—Ü–∏–π: %v", verr)
	}

	if dirty {
		log.Printf("üßπ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ dirty-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π (–≤–µ—Ä—Å–∏—è %d). –ò—Å–ø—Ä–∞–≤–ª—è–µ–º...", version)
		if err := m.Force(int(version)); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ dirty-—Å–æ—Å—Ç–æ—è–Ω–∏—è: %v", err)
			return err
		}
		log.Println("‚úÖ Dirty-—Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ.")
	}

	if config.InfralyraConfig.Server.Mode == config.Debug {
		log.Printf("üß® [%s] –û—á–∏—Å—Ç–∫–∞ —Å—Ö–µ–º—ã public –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –º–∏–≥—Ä–∞—Ü–∏–π...\n", config.Debug)

		db, err := NewDBMS(DBMSConfig{
			Type:     config.InfralyraConfig.PsqlDb.Type,
			Host:     config.InfralyraConfig.PsqlDb.Host,
			Port:     config.InfralyraConfig.PsqlDb.Port,
			Username: config.InfralyraEnv.PsqlDb.Username,
			Password: config.InfralyraEnv.PsqlDb.Password,
			DbName:   config.InfralyraConfig.PsqlDb.Dbname,
			SslMode:  config.InfralyraConfig.PsqlDb.Sslmode,
		})
		if err != nil {
			return err
		}
		defer db.Close()

		query := fmt.Sprintf(`
			DROP SCHEMA public CASCADE;
			CREATE SCHEMA public;
			GRANT ALL ON SCHEMA public TO %s;
			GRANT ALL ON SCHEMA public TO public;
		`, config.InfralyraEnv.PsqlDb.Username)

		if _, err = db.Exec(query); err != nil {
			return err
		}

		m, err = migrate.New(mPath, config.InfralyraEnv.PsqlDb.Url)
		if err != nil {
			return err
		}
	}

	err = m.Up()
	if err != nil {
		if errors.Is(err, migrate.ErrNoChange) {
			log.Println("üëª –ù–µ—Ç –Ω–æ–≤—ã—Ö psql –º–∏–≥—Ä–∞—Ü–∏–π")
			return nil
		}
		return err
	}

	log.Println("‚úîÔ∏è  –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ psql –º–∏–≥—Ä–∞—Ü–∏–π")

	return nil
}

func CloseConnect(db *sqlx.DB) error {
	if err := db.Close(); err != nil {
		return err
	}

	log.Printf(
		"‚úîÔ∏è  –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö %s",
		config.InfralyraConfig.PsqlDb.Dbname,
	)

	return nil
}
